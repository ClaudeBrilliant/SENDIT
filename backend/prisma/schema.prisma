// Prisma schema for SendIT Courier Service

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(uuid())
  firstName         String
  lastName          String
  email             String     @unique
  phone             String     @unique
  password          String
  role              Role       @default(USER)
  parcelsSent       Parcel[]   @relation("SentParcels")
  parcelsToReceive  Parcel[]   @relation("ReceiveParcels")
  courierParcels    Parcel[]   @relation("CourierParcels")
  notifications     Notification[]
  feedbacks         Feedback[]
  logs              Log[]
  courierLocations  CourierLocation[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

enum Role {
  ADMIN
  USER
  COURIER
}

model Parcel {
  id                  String           @id @default(uuid())
  senderId            String
  receiverId          String
  courierId           String?
  weight              Float
  price               Float
  pickupLocationId    String
  deliveryLocationId  String
  currentStatus       DeliveryStatusEnum @default(PENDING)
  proofOfDelivery     ProofOfDelivery?
  tracking            ParcelTracking[]
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  sender              User             @relation("SentParcels", fields: [senderId], references: [id])
  receiver            User             @relation("ReceiveParcels", fields: [receiverId], references: [id])
  courier             User?            @relation("CourierParcels", fields: [courierId], references: [id])
  pickupLocation      Location         @relation("PickupLocation", fields: [pickupLocationId], references: [id])
  deliveryLocation    Location         @relation("DeliveryLocation", fields: [deliveryLocationId], references: [id])
}

model Location {
  id        String   @id @default(uuid())
  label     String
  address   String
  latitude  Float
  longitude Float

  pickupParcels   Parcel[] @relation("PickupLocation")
  deliveryParcels Parcel[] @relation("DeliveryLocation")
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  content     String
  type        NotificationType
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
}

model ProofOfDelivery {
  id         String   @id @default(uuid())
  parcelId   String   @unique
  signature  String? // Optional base64 or URL to image
  notes      String?
  deliveredAt DateTime

  parcel     Parcel   @relation(fields: [parcelId], references: [id])
}

model ParcelTracking {
  id         String   @id @default(uuid())
  parcelId   String
  location   String
  timestamp  DateTime @default(now())

  parcel     Parcel   @relation(fields: [parcelId], references: [id])
}

model Feedback {
  id        String   @id @default(uuid())
  userId    String
  message   String
  rating    Int      // e.g. 1 to 5
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

enum DeliveryStatusEnum {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
  // Add more as needed
}

model Log {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  details   String
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id])
}

model CourierLocation {
  id        String   @id @default(uuid())
  courierId String
  latitude  Float
  longitude Float
  address   String?
  timestamp DateTime @default(now())

  courier   User     @relation(fields: [courierId], references: [id])
}